name: Run API Tests

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      MONGO_URI: ${{ secrets.MONGO_URI }}
      FAISS_INDEX_PATH: ${{ secrets.FAISS_INDEX_PATH }}
      VECTOR_DB_API_KEY: ${{ secrets.VECTOR_DB_API_KEY }}
      AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
      AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
      RAG_API_KEY: ${{ secrets.RAG_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      SAS_TOKEN: ${{ secrets.SAS_TOKEN }}
      VCORE_URI: ${{ secrets.VCORE_URI }}
      LOG_LEVEL: "INFO"  # ‚úÖ Example of a non-secret env variable

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio httpx python-dotenv uvicorn PyJWT

      - name: Create .env File in Backend Directory
        run: |
          mkdir -p Backend  # Ensure Backend directory exists
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" > Backend/.env
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> Backend/.env
          echo "FAISS_INDEX_PATH=${{ secrets.FAISS_INDEX_PATH }}" >> Backend/.env
          echo "VECTOR_DB_API_KEY=${{ secrets.VECTOR_DB_API_KEY }}" >> Backend/.env
          echo "AZURE_STORAGE_ACCOUNT=${{ secrets.AZURE_STORAGE_ACCOUNT }}" >> Backend/.env
          echo "AZURE_STORAGE_KEY=${{ secrets.AZURE_STORAGE_KEY }}" >> Backend/.env
          echo "RAG_API_KEY=${{ secrets.RAG_API_KEY }}" >> Backend/.env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> Backend/.env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> Backend/.env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> Backend/.env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> Backend/.env
          echo "SAS_TOKEN=${{ secrets.SAS_TOKEN }}" >> Backend/.env
          echo "VCORE_URI=${{ secrets.VCORE_URI }}" >> Backend/.env
          echo "LOG_LEVEL=INFO" >> Backend/.env

          # Debugging step to ensure all secrets are correctly set
          echo "üîç Checking .env contents..."
          cat Backend/.env

          # Fail if any secret is missing
          grep -E "=\\s*$" Backend/.env && { echo "‚ùå ERROR: Some secrets are missing!"; exit 1; }

      - name: Build and Start FastAPI Container
        run: |
          cd Backend
          docker build -t backend-test .
          docker run -d -p 8000:8000 --env-file .env --name backend-container backend-test
          sleep 10  # Ensure FastAPI is fully running
          echo "‚úÖ FastAPI container logs:"
          docker logs backend-container

      - name: Wait for API to be Ready
        run: |
          for i in {1..10}; do
            curl --silent --fail http://localhost:8000/docs && echo "‚úÖ FastAPI is ready!" && break
            echo "Waiting for FastAPI to start..."
            sleep 3
          done || { echo "‚ùå FastAPI did not start in time"; exit 1; }

      - name: Run Tests with pytest (Backend Directory)
        run: |
          cd Backend
          pytest tests --maxfail=1 --disable-warnings --tb=short

